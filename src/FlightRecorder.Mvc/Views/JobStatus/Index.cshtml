@using FlightRecorder.Mvc.Entities
@model FlightRecorder.Mvc.Models.JobStatusViewModel

@{
    ViewData["Title"] = "Job Status Report";
    string previousDisabled = (Model.PreviousEnabled) ? "" : "disabled";
    string nextDisabled = (Model.NextEnabled) ? "" : "disabled";
}

<p class="text-center font-weight-bold">
    <span style="font-size: 1.2rem">
        Job Status
    </span>
    <br />
    <small class="text-muted">
        <em>
            Report the status of background jobs
        </em>
    </small>
</p>

<div id="MessageContainer" style="display:none">
    <div class="row">
        <div class="col-md-12 message">
            <span id="MessageText"></span>
        </div>
    </div>
    <hr />
</div>

<div id="ErrorContainer" style="display:none">
    <div class="row">
        <div class="col-md-12 error">
            <span id="ErrorText"></span>
        </div>
    </div>
    <hr />
</div>

<div class="container-fluid">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col">
                <strong>@Html.LabelFor(m => m.From)</strong>
                <div class="input-group">
                    @Html.EditorFor(m => m.From, new { @class = "form-control" })
                </div>
                <span>@Html.ValidationMessageFor(m => m.From, "", new { @class = "text-danger" })</span>
            </div>
            <div class="col">
                <strong>@Html.LabelFor(m => m.To)</strong>
                <div class="input-group">
                    @Html.EditorFor(m => m.To, new { @class = "form-control" })
                </div>
                <span>@Html.ValidationMessageFor(m => m.To, "", new { @class = "text-danger" })</span>
            </div>
            <div class="col">
                <strong><label>&nbsp;</label></strong>
                <div class="input-group">
                    @if (Model.Records != null)
                    {
                        <button id="Export" class="btn btn-secondary">Export</button>
                        <strong><label>&nbsp;</label></strong>
                    }
                    <button type="submit" name="Action" value="@ControllerActions.ActionSearch" class="btn btn-primary">Search</button>
                </div>
            </div>
        </div>
        <br />

        @Html.HiddenFor(m => m.PageNumber)

        @if (Model.Records != null)
        {
            <table class="table">
                <tr>
                    <th>Job Name</th>
                    <th>Parameters</th>
                    <th>Started</th>
                    <th>Completed</th>
                    <th>Errors</th>
                </tr>
                @foreach (var record in Model.Records)
                {
                    <tr>
                        <td valign="center">@record.Name</td>
                        <td valign="center">@record.Parameters</td>
                        <td valign="center">@record.Start</td>
                        <td valign="center">@record.End</td>
                        <td valign="center">@record.Error</td>
                    </tr>
                }
            </table>
            <hr />
            <p class="text-right">
                <button type="submit" name="Action" value="@ControllerActions.ActionPreviousPage" class="btn btn-secondary" @previousDisabled>Previous</button>
                <button type="submit" name="Action" value="@ControllerActions.ActionNextPage" class="btn btn-primary" @nextDisabled>Next</button>
            </p>
        }
        else if (Model.HasNoMatchingResults)
        {
            <hr />
            @Html.Raw("Airline statistics are not available")
        }
    }
</div>

<script type="text/javascript">
    function ExportReport(url) {
        // Hide the error and message elements
        $("#MessageContainer").hide();
        $("#WarningContainer").hide();
        $("#ErrorContainer").hide();

        // Construct the model holding the export parameters to POST to the controller
        var from = $("#From").val();
        var to = $("#To").val();

        const model = {
            "From": from ? new Date(from).toISOString() : null,
            "To": to ? new Date(to).toISOString() : null
        };

        // Set a busy cursor
        $('html, body').css("cursor", "wait");

        // POST the data to the controller
        $.ajax({
            url: url,
            method: "POST",
            data: JSON.stringify(model),
            contentType: "application/json",
            cache: false,
            success: function (result) {
                // Worked, so show an "OK" message
                $("#MessageText").text("The report export has been queued in the background");
                $("#MessageContainer").show();
                $('html, body').css("cursor", "auto");
            },
            error: function (xhr, status, error) {
                // Failed, so show an error message
                var errorMessage = xhr.status + ': ' + xhr.statusText
                $("#ErrorText").text(errorMessage);
                $("#ErrorContainer").show();
                $('html, body').css("cursor", "auto");
            }
        });
    }

    $(document).ready(function () {
        // Respond to a click on the "Export" button by POSTing an export request back
        $("#Export").click(function (e) {
            e.preventDefault();
            ExportReport("/JobStatus/Export");
        });
    });
</script>
